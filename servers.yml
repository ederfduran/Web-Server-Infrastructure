Parameters:
  EnvironmentName:
    Description: Environment that will be prefixed on resources
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # SSH port to managae instance, Only during development then close this port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  JumpboxServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        # SSH port to managae instance, Only during development then close this port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  S3ReadOnlyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  AppProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: S3ReadOnlyEC2Role

  # JumpboxServer:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     KeyName: "jumpbox-key"
  #     ImageId: ami-005bdb005fb00e791
  #     InstanceType: t2.medium
  #     IamInstanceProfile: !Ref AppProfile
  #     Monitoring: true
  #     BlockDeviceMappings:
  #       - DeviceName: "/dev/sda1"
  #         Ebs:
  #           # 10gb for hard drive
  #           VolumeSize: "10"
  #     SubnetId:
  #       Fn::ImportValue: !Sub "${EnvironmentName}-PUB3-SN"
  #     SecurityGroupIds:
  #       - Ref: JumpboxServerSecGroup
  #     UserData: !Base64 |
  #       #!/bin/bash -ex

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          apt-get update &&
          apt-get -o Dpkg::Options::="--force-confold" upgrade -q -y --force-yes &&
          apt-get -o Dpkg::Options::="--force-confold" dist-upgrade -q -y --force-yes
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://eder-web-app/udagram.zip .
          unzip -o udagram.zip
      ImageId: ami-005bdb005fb00e791
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.medium
      IamInstanceProfile: !Ref "AppProfile"
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            # 10gb for hard drive
            VolumeSize: "10"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MaxSize: 4
      MinSize: 4
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  # Health Check
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  ELB:
    Description: Public DNS to access web page
    Value: !Sub http//:${WebAppLB.DNSName}
    Export:
      Name: WEB-DNS
